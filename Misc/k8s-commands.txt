https://www.virtualbox.org/wiki/Downloads


brew cask install vagrant

brew tap hashicorp/tap
brew install vagrant

https://git-scm.com/downloads

vagrant status
vagrant up
vagrant plugin install vagrant-scp

vagrant ssh <machine_name> // kubemaster, kubenode01, kubenode02
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
lsmod | grep br_netfilter

sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

sudo -i

https://kubernetes.io/docs/setup/production-environment/container-runtimes/
# (Install Docker CE)
## Set up the repository:
### Install packages to allow apt to use a repository over HTTPS
apt-get update && apt-get install -y \
  apt-transport-https ca-certificates curl software-properties-common gnupg2

# Add Docker's official GPG key:
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

# Add the Docker apt repository:
add-apt-repository \
  "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) \
  stable"

# Install Docker CE
apt-get update && apt-get install -y \
  containerd.io=1.2.13-2 \
  docker-ce=5:19.03.11~3-0~ubuntu-$(lsb_release -cs) \
  docker-ce-cli=5:19.03.11~3-0~ubuntu-$(lsb_release -cs)

# Set up the Docker daemon
cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

mkdir -p /etc/systemd/system/docker.service.d

# Restart Docker
systemctl daemon-reload
systemctl restart docker

If you want the docker service to start on boot, run the following command:

sudo systemctl enable docker

systemctl status docker
docker images
docker ps -a

Installing kubeadm, kubelet and kubectl
You will install these packages on all of your machines:

kubeadm: the command to bootstrap the cluster.
kubelet: the component that runs on all of the machines in your cluster and does things like starting pods and containers.
kubectl: the command line util to talk to your cluster.

sudo apt-get update && sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

kubeadm version
kubelet --version
kubectl version

vagrant ssh kubemaster
kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.56.2
<Follow_Instructions>

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

kubectl create deploy nginx-deploy --image=nginx:latest --containerPort=80 --replicas=2

# Helm install
brew install helm - MacOS
choco install kubernetes-helm - Windows
sudo snap install helm --classic - Ubuntu
https://helm.sh/docs/intro/install/#helm - Refer this for more options

# Create a namespace for your ingress resources
kubectl create namespace ingress-basic

# Add the ingress-nginx repository
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

# Use Helm to deploy an NGINX ingress controller
helm install aks-workshop-ing ingress-nginx/ingress-nginx \
    --namespace aks-workshop-ing-ns \
    -f "./Common/internal-ingress.yaml" \
    --set controller.replicaCount=2 \
    --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
    --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux

helm repo add nginx-stable https://helm.nginx.com/stable
helm install aks-workshop-ing nginx-stable/nginx-ingress \
    --namespace aks-workshop-ing-ns \
    -f "./Common/internal-ingress.yaml" \
    --set controller.replicaCount=2 \
    --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
    --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux

#MEtalB
https://metallb.universe.tf/installation/

kubectl edit configmap -n kube-system kube-proxy
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
mode: "ipvs"
ipvs:
  strictARP: true


kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml
# On first install only
kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"

#nginx on baremetal
https://kubernetes.github.io/ingress-nginx/deploy/baremetal/

#mongodb
helm install ratings-mongodb bitnami/mongodb --namespace k8s-dev --set auth.username=ratings-user,auth.password=ratings-pwd,auth.database=ratingsdb,volumePermissions.enabled=true
k create secret generic k8s-workshop-mongo-secret --from-literal=MONGOCONNECTION=mongodb://ratings-user:ratings-pwd@ratings-mongodb.k8s-dev:27017/ratingsdb -n k8s-dev

#ACR
k create secret docker-registry k8s-workshop-secret --docker-server=k8swkshpacr.azurecr.io --docker-username=k8swkshpacr --docker-password=QW22y7IcoCeSLTEckoRP=0TWzAB98weC -n k8s-dev


kubectl config view --minify -o jsonpath={.clusters[0].cluster.server}
kubectl get serviceAccounts <service-account-name> -n <namespace> -o=jsonpath={.secrets[*].name}
kubectl get secret <service-account-secret-name> -n <namespace> -o json

kubectl port-forward --namespace k8s-dev svc/ratings-mongodb 27017:27017 & mongo --host 127.0.0.1 --authenticationDatabase admin -p ratings-pwd



https://dev.azure.com/modatta
lpvovomilxpl7yfxjishrjjglxiyot3w6242rkihz3y5rp445f7a
k8s-devops-pool
xattr -c <vsts-agent-tar-gz>
tar zxvf <vsts-agent-tar-gz>



